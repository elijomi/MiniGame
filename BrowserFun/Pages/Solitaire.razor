@page "/solitaire"
@using System.Text.Json
@using BrowserFun.Components

<PageTitle>Solitaire</PageTitle>

<div class="sol-wrapper">
    <div class="game-header">
        <h1>Solitaire</h1>
        <div class="counters">
            <span><strong>Moves:</strong> @moves</span>
            <span><strong>Redeals:</strong> @redeals</span>
        </div>
        <div class="actions">
            <button class="btn btn-sm btn-secondary" @onclick="NewGame">New Game</button>
            <button class="btn btn-sm btn-secondary" @onclick="Undo" disabled="@(!CanUndo)">Undo</button>
        </div>
        <div class="size-controls">
            <div class="size-toggle" role="group" aria-label="UI size selector">
                <button type="button"
                        class="size-btn @(sizeMode == SizeMode.Small ? "active" : null)"
                        title="Compact UI" aria-label="Compact UI"
                        @onclick="() => SetSize(SizeMode.Small)">
                    <span class="card-swatch swatch-sm"></span>
                </button>
                <button type="button"
                        class="size-btn @(sizeMode == SizeMode.Comfortable ? "active" : null)"
                        title="Comfortable UI" aria-label="Comfortable UI"
                        @onclick="() => SetSize(SizeMode.Comfortable)">
                    <span class="card-swatch swatch-md"></span>
                </button>
                <button type="button"
                        class="size-btn @(sizeMode == SizeMode.Large ? "active" : null)"
                        title="Large UI" aria-label="Large UI"
                        @onclick="() => SetSize(SizeMode.Large)">
                    <span class="card-swatch swatch-lg"></span>
                </button>
            </div>
        </div>
    </div>

    <div class="board @BoardSizeClass">
        <div class="top-row">
            <!-- Foundations leftmost (4) -->
            @for (var f = 0; f < 4; f++)
            {
                var ff = f; // capture per-iteration index
                <div class="pile foundation"
                     @onclick="(() => OnClickFoundation(ff))">
                @foreach (var (card, i) in EnumeratePile(foundations[ff]))
                {
                    var ii = i; // capture per-iteration index
                    <div class="sol-card @(card.FaceUp ? "faceup" : "facedown") @(IsSelected(DragSourceKind.Foundation, ff, ii) ? " selected" : string.Empty)"
                         style="top:@(ii * 1)px; left:@(ii * 0)px;">
                        <SolitaireCard FaceUp="@card.FaceUp"
                                       IsRed="@card.IsRed"
                                       Rank="@card.Rank"
                                       SuitGlyph="@SuitToUtf16(card.Suit)" />
                    </div>
                }
                    @if (foundations[ff].Count == 0)
                    {
                        <div class="slot" @onclick="(() => OnClickFoundation(ff))"></div>
                    }
                </div>
            }

            <div class="spacer"></div>

            <!-- Waste then Stock (rightmost) -->
            <div class="pile waste"
                 @onclick="OnClickWaste"
                 @ondblclick="OnDoubleClickWaste">
                @{ var start = Math.Max(0, waste.Count - 3); }
                @for (var i = start; i < waste.Count; i++)
                {
                    var card = waste[i];
                    var ii = i; var isTop = ii == waste.Count - 1;
                    // Fan to the left so waste never intrudes into the stock pile
                    var relRight = (waste.Count - 1) - i; // 0 for rightmost (top), then 1,2 for previous
                    <div class="sol-card @(card.FaceUp ? "faceup" : "facedown") @(IsSelected(DragSourceKind.Waste, 0, ii) ? " selected" : string.Empty)"
                         style="left:@(-(relRight * WasteFanStepPx))px;">
                        <SolitaireCard FaceUp="@card.FaceUp"
                                       IsRed="@card.IsRed"
                                       Rank="@card.Rank"
                                       SuitGlyph="@SuitToUtf16(card.Suit)" />
                    </div>
                }
                @if (waste.Count == 0)
                {
                    <div class="slot" @onclick="OnClickWaste"></div>
                }
            </div>

            <div class="pile stock" @onclick="DrawFromStock">
                @if (stock.Count == 0)
                {
                    <div class="slot empty-stock" title="Redeal from waste"></div>
                }
                else
                {
                    <div class="sol-card facedown"></div>
                }
            </div>
        </div>

        <div class="tableau-row">
            @for (var t = 0; t < 7; t++)
            {
                var tt = t; // capture per-iteration index
                <div class="pile tableau"
                     @onclick="(() => OnClickTableau(tt))">
                    @{ var runningTop = 0; }
                    @for (var i = 0; i < tableau[tt].Count; i++)
                    {
                        var ii = i; // capture per-iteration index
                        var card = tableau[tt][ii];
                        // Place current card, then advance by the previous card's spacing rule
                        var top = runningTop;
                        var step = card.FaceUp ? FaceUpTableauOffset : FaceDownTableauOffset;
                        runningTop += step;
                        var isDraggable = card.FaceUp; // allow dragging runs starting at any face-up card
                        <div class="sol-card @(card.FaceUp ? "faceup" : "facedown") @(IsSelected(DragSourceKind.Tableau, tt, ii) ? " selected" : string.Empty)"
                             style="top:@($"{top}px");"
                             @onclick="(() => OnClickTableauCard(tt, ii))" @onclick:stopPropagation="true"
                             @ondblclick="(() => OnDoubleClickTableauCard(tt, ii))" @ondblclick:stopPropagation="true">
                            <SolitaireCard FaceUp="@card.FaceUp"
                                           IsRed="@card.IsRed"
                                           Rank="@card.Rank"
                                           SuitGlyph="@SuitToUtf16(card.Suit)" />
                        </div>
                    }
                    @if (tableau[tt].Count == 0)
                    {
                        <div class="slot" @onclick="(() => OnClickTableau(tt))"></div>
                    }
                </div>
            }
        </div>
    </div>
</div>

